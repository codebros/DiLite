{"name":"DiLite","body":"### Welcome to DiLite.\r\nDiLite allows developers to perform constructor injection of dependencies by creating a binding between a pair of types `I` and `T` such that `T` is a concrete implementation of `I`. This is based on the idea of interfaces from other object-oriented languages, and is achieved in C++ and DiLite using pure abstract classes.\r\n\r\nThe bindings can be used to resolve objects in either transient- or Singleton scope, thus freeing the developer to focus on business logic instead.\r\n\r\n### Please add some Samurais!\r\n```cpp\r\nint main()\r\n{\r\n    DI::GetInstance().Bind<IWeapon, Shuriken>();\r\n    DI::GetInstance().Bind<IWarrior>(&CreateSamurai);\r\n\r\n    IWarrior* w1 = DI::GetInstance().Resolve<IWarrior>();\r\n    IWarrior* w2 = DI::GetInstance().Resolve<IWarrior>();\r\n\r\n    w1->Attack(w2);\r\n\r\n    return 0;\r\n}\r\n\r\nIWarrior* CreateSamurai()\r\n{\r\n    return new Samurai(DI::GetInstance().Resolve<IWeapon>());\r\n}\r\n```\r\n\r\n### Authors and Contributors\r\nDiLite was initiated in 2012 during an Advanced Programming course in C++ at Aalborg University, Denmark.\r\nAfter hand-in, the project has been released as open-source.\r\n\r\nOriginal project owners are:\r\n\r\n* Jeppe Pihl ([@jpihl](https://twitter.com/#!/jpihl))\r\n* Lasse Linnerup Christiansen ([@sw_lasse](https://twitter.com/#!/sw_lasse))\r\n* Kenneth Fuglsang Christensen ([@kfuglsang](https://twitter.com/#!/kfuglsang))","tagline":"Lightweight Dependency Injection Framework for C++","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}